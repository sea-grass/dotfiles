#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return


PS1='[\u@\h \W]\$ '
set bell-style none

VIRTUALENVWRAPPER=virtualenvwrapper.sh
if hash "$VIRTUALENVWRAPPER" 2>/dev/null;
  then
    export WORKON_HOME=~/.virtualenvs
    if ! [ -d "$WORKON_HOME" ]
      then
        mkdir -p "$WORKON_HOME"
    fi
    source `which "$VIRTUALENVWRAPPER"`
  else
    echo "WARNING: virtualenvwrapper not found"
fi

PEBBLE_SDK_PATH="~/pebble-dev/PebbleSDK-2.9"
if [ -a $PEBBLE_SDK_PATH ]
  then
    export PATH="$PEBBLE_SDK_PATH/bin:$PATH"
  else
    echo "WARNING: Pebble SDK not found"
fi

#Android tools need to see ANDROID_HOME
export ANDROID_HOME=/opt/android-sdk
if [ -a $ANDROID_HOME ]; then
  export PATH="$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools:$ANDROID_HOME/tools"
else
  echo "WARNING: Android SDK not found"
  unset ANDROID_HOME
fi

if ! [ -z $DISPLAY ]; then
  xrdb -merge ~/.Xresources
fi

if hash go 2>/dev/null; then
  export GOPATH=~/.go
  export PATH="$PATH:$GOPATH/bin"
else
  echo "WARNING: Go not installed"
fi

if hash node 2>/dev/null; then
  export PATH="$HOME/.node_modules/bin:$PATH"
else
  echo "WARNING: node not installed"
  if hash nodejs 2>/dev/null; then
    alias node="nodejs"
    echo "noooode"
  fi
fi

if hash ruby 2>/dev/null; then
  export GEMPATH=$(ruby -e "print Gem.user_dir")
  export PATH="$PATH:$GEMPATH/bin"
else
  echo "WARNING: ruby not installed"
fi

#github: ingydotnet/git-hub
if [ -d $HOME/.git-hub ]; then
  export PATH="$HOME/.git-hub/lib:$PATH"
  export MANPATH="$HOME/.git-hub/man:$MANPATH"
else
  echo "WARNING: git-hub not installed"
fi

if hash canto-curses 2>/dev/null; then
  alias canto="canto-curses"
else
  echo "WARNING: canto-curses not installed"
fi

if hash chuck 2>/dev/null; then
  #TODO: Put the else statement's contents into this
  echo "Do your TODO for chuck"
else
  echo "WARNING: chuck is not installed"
fi

#export PATH=/home/chris/aur/torch/install/bin:$PATH  # Added automatically by torch-dist
#export LD_LIBRARY_PATH=/home/chris/aur/torch/install/lib:$LD_LIBRARY_PATH  # Added automatically by torch-dist
#export DYLD_LIBRARY_PATH=/home/chris/aur/torch/install/lib:$DYLD_LIBRARY_PATH  # Added automatically by torch-dist

export PATH="$PATH:$HOME/.local/bin"

alias [p="ls;pwd;jobs"
alias ..="cd .. && pwd"

if hash npm 2>/dev/null; then
  #ne - aka npm-exec - Use to execute node_modules
  # within the current project
  # Usage: ne bower
  alias ne="PATH=$(npm bin):$PATH"
else
  echo "WARNING: npm not installed"
fi

if hash ip 2>/dev/null; then
  alias inet="ip addr | grep inet"
else
  echo "WARNING: ip not present; TODO: add inet alt. solution"
fi

if hash vim 2>/dev/null; then
  alias vi="vim"
else
  echo "WARNING: vim not installed"
fi

alias edb="vi ~/.bashrc; rlb"
alias rlb="source ~/.bashrc && echo '~/.bashrc reloaded'"

alias ls='ls --color=auto'

function talk { echo "`date +%F-%T` $USER: $@" >> ~/talkfile; }
function cattalk { tail -f ~/talkfile; }

# Alias to some custom scripts
if [ -a ~/.virtualenvs/monitor/projects/imageViewer.py ]; then
  alias open_image="python ~/.virtualenvs/monitor/projects/imageViewer.py"
else
  echo "WARNING: open_image not available (python script missing)"
fi

# Some custom bash functions

#TODO: Add a link to source for aur() function
#TODO: Add check for Arch Linux before defining this function
function aur() {
  if [ "$#" -ne 1 ]; then
    echo "Usage: $0 aur-package-name (Downloads aur-package-name.tar.gz)"
    return -1
  fi
  base=https://aur.archlinux.org/packages
  pkg=$1
  echo "Downloading $pkg.tar.gz from aur"
  file=${pkg}.tar.gz
  url=$base/${pkg:0:2}/${pkg}/$file

  curl $url > $file

  unset pkg
  unset base
  unset url
  unset file
}

